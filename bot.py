import telebot
from telebot import types
import requests
import logging
import time
import re
from datetime import datetime
import sqlite3
import html
import os  # –î–æ–±–∞–≤–ª–µ–Ω–æ: –¥–ª—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# === –ù–ê–°–¢–†–û–ô–ö–ò –ß–ï–†–ï–ó –ü–ï–†–ï–ú–ï–ù–ù–´–ï –û–ö–†–£–ñ–ï–ù–ò–Ø ===
TOKEN = os.getenv("BOT_TOKEN")  # –ë–µ—Ä—ë—Ç—Å—è –∏–∑ Railway
CHANNEL_USERNAME = "@AIwithCoffee"
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")  # –ë–µ—Ä—ë—Ç—Å—è –∏–∑ Railway

EMOJIS = {
    'robot': 'ü§ñ', 'star': '‚≠ê', 'check': '‚úÖ', 'subscribe': 'üì¢',
    'question': '‚ùì', 'light': 'üí°', 'warning': '‚ö†Ô∏è', 'party': 'üéâ',
    'fire': 'üî•', 'clock': '‚è∞', 'brain': 'üß†', 'zap': '‚ö°',
    'pen': '‚úçÔ∏è', 'book': 'üìö', 'bulb': 'üí°', 'globe': 'üåç'
}

# –ò–ó–ú–ï–ù–ï–ù–û: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ parse_mode='HTML'
bot = telebot.TeleBot(TOKEN, parse_mode='HTML')
user_requests = {}
user_subscriptions = {}
user_busy_states = {}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('bot_history.db', check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS user_history (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            role TEXT,
            content TEXT,
            timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    conn.commit()
    conn.close()

def save_to_history(user_id, role, content):
    conn = sqlite3.connect('bot_history.db', check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute('''
        INSERT INTO user_history (user_id, role, content)
        VALUES (?, ?, ?)
    ''', (user_id, role, content))
    conn.commit()
    conn.close()

def get_user_history(user_id, limit=10):
    conn = sqlite3.connect('bot_history.db', check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute('''
        SELECT role, content FROM user_history
        WHERE user_id = ?
        ORDER BY timestamp DESC
        LIMIT ?
    ''', (user_id, limit))
    history = cursor.fetchall()
    conn.close()
    return [(role, content) for role, content in reversed(history)]

def cleanup_history(user_id):
    conn = sqlite3.connect('bot_history.db', check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute('''
        DELETE FROM user_history WHERE id NOT IN (
            SELECT id FROM user_history
            WHERE user_id = ?
            ORDER BY timestamp DESC
            LIMIT 20
        ) AND user_id = ?
    ''', (user_id, user_id))
    conn.commit()
    conn.close()

def clean_response(text):
    if not text:
        return ""
    text = re.sub(r'<think>.*?</think>', '', text, flags=re.DOTALL)
    text = re.sub(r'<\w+[^>]*>', lambda m: m.group(0) if m.group(0) in ['<b>', '<i>', '<code>', '<pre>'] else '', text)
    text = re.sub(r'</\w+>', lambda m: m.group(0) if m.group(0) in ['</b>', '</i>', '</code>', '</pre>'] else '', text)
    text = re.sub(r'\*\*(.*?)\*\*', r'<b>\1</b>', text)
    text = re.sub(r'\*(.*?)\*', r'<i>\1</i>', text)
    
    def code_block_replace(match):
        code_content = match.group(1).strip()
        code_content = html.escape(code_content)
        return f'<pre><code>{code_content}</code></pre>'
    
    text = re.sub(r'```([^`]*)```', code_block_replace, text, flags=re.DOTALL)
    text = re.sub(r'`([^`]+)`', r'<code>\1</code>', text)
    return text.strip()

def is_user_subscribed(user_id):
    current_time = time.time()
    if user_id in user_subscriptions:
        cached_time, is_subscribed = user_subscriptions[user_id]
        if current_time - cached_time < 300:
            return is_subscribed
    try:
        chat_member = bot.get_chat_member(CHANNEL_USERNAME, user_id)
        is_subscribed = chat_member.status in ['member', 'administrator', 'creator']
        user_subscriptions[user_id] = (current_time, is_subscribed)
        return is_subscribed
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False

def is_user_busy(user_id):
    return user_busy_states.get(user_id, False)

def set_user_busy(user_id, busy=True):
    user_busy_states[user_id] = busy

def get_ai_response(prompt, user_id):
    try:
        headers = {
            "Authorization": f"Bearer {OPENROUTER_API_KEY}",
            "Content-Type": "application/json"
        }
        
        history = get_user_history(user_id)
        
        is_code_request = any(keyword in prompt.lower() for keyword in [
            '–∫–æ–¥', 'script', 'unity', 'c#', 'csharp', 'python', 'javascript', 'js', 
            'java', 'cpp', 'c++', 'php', 'ruby', 'go', 'rust', 'swift', 'kotlin',
            '—Å–∫—Ä–∏–ø—Ç', '–ø—Ä–æ–≥—Ä–∞–º–º–∞', '—Ñ—É–Ω–∫—Ü–∏—è', '–º–µ—Ç–æ–¥', '–∫–ª–∞—Å—Å'
        ])
        
        if is_code_request:
            models_to_try = [
                "qwen/qwen-coder",
                "deepseek/deepseek-coder",
                "google/gemma-7b-it"
            ]
            system_prompt = """–¢—ã Qwen Coder, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è.
–¢—ã –¥–æ–ª–∂–µ–Ω –ø–∏—Å–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ä–∞–±–æ—á–∏–π, –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥.
–ù–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.
–û–±—ä—è—Å–Ω—è–π –∫–æ–¥ –ø–æ —à–∞–≥–∞–º.
–ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å.
–û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."""
        else:
            models_to_try = [
                "mistralai/mistral-7b-instruct",
                "google/gemma-7b-it",
                "openchat/openchat-7b"
            ]
            system_prompt = """–¢—ã Qwen, –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —è–∑—ã–∫–æ–≤–∞—è –º–æ–¥–µ–ª—å.
–ë—É–¥—å –ø–æ–ª–µ–∑–Ω—ã–º, —Ç–æ—á–Ω—ã–º –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º.
–û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
–ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å –æ—Ç–≤–µ—Ç–∞ ‚Äî —Å–∫–∞–∂–∏ —á–µ—Å—Ç–Ω–æ."""

        messages = [{"role": "system", "content": system_prompt}]
        for role, content in history:
            messages.append({"role": role, "content": content})
        messages.append({"role": "user", "content": prompt})
        
        for model in models_to_try:
            data = {
                "model": model,
                "messages": messages,
                "temperature": 0.5,
                "max_tokens": 1000,
                "top_p": 0.9,
                "frequency_penalty": 0.1
            }
            
            logger.info(f"–ó–∞–ø—Ä–æ—Å –∫ –º–æ–¥–µ–ª–∏: {model}")
            start_time = time.time()
            
            response = requests.post(
                "https://openrouter.ai/api/v1/chat/completions",  # ‚úÖ –ë–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤!
                headers=headers,
                json=data,
                timeout=25
            )
            
            end_time = time.time()
            logger.info(f"–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {end_time - start_time:.2f} —Å–µ–∫")
            
            if response.status_code == 200:
                result = response.json()
                answer = result['choices'][0]['message']['content']
                clean_answer = clean_response(answer)
                
                save_to_history(user_id, "user", prompt)
                save_to_history(user_id, "assistant", clean_answer)
                cleanup_history(user_id)
                
                return clean_answer
            else:
                logger.warning(f"–ú–æ–¥–µ–ª—å {model} –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞: {response.status_code}")
                if response.status_code == 429 or response.status_code >= 500:
                    time.sleep(1)
                continue
        
        logger.error("–í—Å–µ –º–æ–¥–µ–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        return None
            
    except requests.exceptions.Timeout:
        logger.error("–¢–∞–π–º–∞—É—Å –∑–∞–ø—Ä–æ—Å–∞ –∫ API")
        return "timeout"
    except requests.exceptions.ConnectionError:
        logger.error("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API")
        return "connection_error"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenRouter: {e}")
        return None

def check_user_limit(user_id):
    current_time = datetime.now()
    if user_id not in user_requests:
        user_requests[user_id] = []
    user_requests[user_id] = [
        req_time for req_time in user_requests[user_id] 
        if (current_time - req_time).seconds < 3600
    ]
    if len(user_requests[user_id]) >= 15:
        return False, "–í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ (15 –≤ —á–∞—Å). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!"
    user_requests[user_id].append(current_time)
    return True, ""

def get_main_menu_markup():
    markup = types.InlineKeyboardMarkup(row_width=1)
    channel_btn = types.InlineKeyboardButton(
        f"{EMOJIS['subscribe']} –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", 
        url=f"https://t.me/{CHANNEL_USERNAME[1:]}"
    )
    check_btn = types.InlineKeyboardButton(
        f"{EMOJIS['check']} –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", 
        callback_data="check_subscription"
    )
    help_btn = types.InlineKeyboardButton(
        f"{EMOJIS['question']} –ü–æ–º–æ—â—å", 
        callback_data="help"
    )
    markup.add(channel_btn, check_btn, help_btn)
    return markup

@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_id = message.from_user.id
    user_name = message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    if is_user_subscribed(user_id):
        welcome_text = f"""
{EMOJIS['party']} <b>–ü—Ä–∏–≤–µ—Ç —Å–Ω–æ–≤–∞, {user_name}!</b>

{EMOJIS['robot']} –¢—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª –∏ –º–æ–∂–µ—à—å –∑–∞–¥–∞–≤–∞—Ç—å –º–Ω–µ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã!

<b>–ß—Ç–æ —è —É–º–µ—é:</b>
‚Ä¢ {EMOJIS['light']} –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
‚Ä¢ {EMOJIS['pen']} –ü–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç—ã  
‚Ä¢ {EMOJIS['book']} –ü–æ–º–æ–≥–∞—Ç—å —Å —É—á–µ–±–æ–π
‚Ä¢ {EMOJIS['bulb']} –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–¥–µ–∏
‚Ä¢ {EMOJIS['globe']} –ü–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Ç–µ–∫—Å—Ç—ã

<i>{EMOJIS['zap']} –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –≤ —á–∞—Ç!</i>
<i>{EMOJIS['warning']} –õ–∏–º–∏—Ç: 15 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —á–∞—Å</i>
        """
        markup = types.InlineKeyboardMarkup()
        help_btn = types.InlineKeyboardButton(f"{EMOJIS['question']} –ü–æ–º–æ—â—å", callback_data="help")
        markup.add(help_btn)
        bot.send_message(message.chat.id, welcome_text, reply_markup=markup)
        return
    
    welcome_text = f"""
{EMOJIS['robot']} <b>–ü—Ä–∏–≤–µ—Ç, {user_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AI –ü–æ–º–æ—â–Ω–∏–∫!</b>

{EMOJIS['brain']} <b>–ß—Ç–æ —è —É–º–µ—é:</b>
‚Ä¢ {EMOJIS['light']} –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã
‚Ä¢ {EMOJIS['pen']} –ü–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç—ã –∏ —Å–æ—á–∏–Ω–µ–Ω–∏—è  
‚Ä¢ {EMOJIS['book']} –ü–æ–º–æ–≥–∞—Ç—å —Å —É—á–µ–±–æ–π
‚Ä¢ {EMOJIS['bulb']} –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–¥–µ–∏
‚Ä¢ {EMOJIS['globe']} –ü–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Ç–µ–∫—Å—Ç—ã

{EMOJIS['warning']} <b>–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ:</b>
1. {EMOJIS['subscribe']} –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª {CHANNEL_USERNAME}
2. {EMOJIS['check']} –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É

<i>{EMOJIS['zap']} –≠—Ç–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ! –õ–∏–º–∏—Ç: 15 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —á–∞—Å</i>
    """
    bot.send_message(message.chat.id, welcome_text, reply_markup=get_main_menu_markup())

# ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (–Ω–µ –º–µ–Ω—è–ª–∏—Å—å) ...

if __name__ == '__main__':
    init_db()
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    try:
        bot_info = bot.get_me()
        logger.info(f"‚úÖ –ë–æ—Ç @{bot_info.username} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
        print(f"ü§ñ –ë–æ—Ç @{bot_info.username} –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        print("–ù–∞–∂–º–∏ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        bot.polling(none_stop=True)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")