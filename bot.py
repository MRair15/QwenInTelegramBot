# bot.py
import os  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º os –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
import telebot
from telebot import types
import requests
import json
import logging
import time
import re
from datetime import datetime
import sqlite3
import html

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# === –ù–ê–°–¢–†–û–ô–ö–ò –ò–ó –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø ===
# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
OPENROUTER_API_KEY = os.getenv('OPENROUTER_API_KEY')

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ª–∏ —Ç–æ–∫–µ–Ω—ã
if not TOKEN:
    raise ValueError("–û—à–∏–±–∫–∞: TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
if not OPENROUTER_API_KEY:
    raise ValueError("–û—à–∏–±–∫–∞: OPENROUTER_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

# –ò–º—è –∫–∞–Ω–∞–ª–∞ (—É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å @)
CHANNEL_USERNAME = '@AIwithCoffee'

EMOJIS = {
    'robot': 'ü§ñ', 'star': '‚≠ê', 'check': '‚úÖ', 'subscribe': 'üì¢',
    'question': '‚ùì', 'light': 'üí°', 'warning': '‚ö†Ô∏è', 'party': 'üéâ',
    'fire': 'üî•', 'clock': '‚è∞', 'brain': 'üß†', 'zap': '‚ö°',
    'pen': '‚úçÔ∏è', 'book': 'üìö', 'bulb': 'üí°', 'globe': 'üåç'
}

# –ò–ó–ú–ï–ù–ï–ù–û: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ parse_mode='HTML'
bot = telebot.TeleBot(TOKEN, parse_mode='HTML')
user_requests = {}
user_subscriptions = {}
# –ù–û–í–û–ï: –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∑–∞–Ω—è—Ç/—Å–≤–æ–±–æ–¥–µ–Ω)
user_busy_states = {}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏
def init_db():
    conn = sqlite3.connect('bot_history.db', check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS user_history (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            role TEXT,
            content TEXT,
            timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    conn.commit()
    conn.close()

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é
def save_to_history(user_id, role, content):
    conn = sqlite3.connect('bot_history.db', check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute('''
        INSERT INTO user_history (user_id, role, content)
        VALUES (?, ?, ?)
    ''', (user_id, role, content))
    conn.commit()
    conn.close()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_history(user_id, limit=10):
    conn = sqlite3.connect('bot_history.db', check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute('''
        SELECT role, content FROM user_history
        WHERE user_id = ?
        ORDER BY timestamp DESC
        LIMIT ?
    ''', (user_id, limit))
    history = cursor.fetchall()
    conn.close()
    return [(role, content) for role, content in reversed(history)]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ

# –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä–æ–π –∏—Å—Ç–æ—Ä–∏–∏ (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å–æ–æ–±—â–µ–Ω–∏–π)
def cleanup_history(user_id):
    conn = sqlite3.connect('bot_history.db', check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute('''
        DELETE FROM user_history WHERE id NOT IN (
            SELECT id FROM user_history
            WHERE user_id = ?
            ORDER BY timestamp DESC
            LIMIT 20
        ) AND user_id = ?
    ''', (user_id, user_id))
    conn.commit()
    conn.close()

def clean_response(text):
    """–û—á–∏—Å—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ç–µ–≥–æ–≤ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞"""
    if not text:
        return ""
    
    # –£–¥–∞–ª—è–µ–º —Ç–µ–≥–∏ <think> –∏ –¥—Ä—É–≥–∏–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Ç–µ–≥–∏
    text = re.sub(r'<think>.*?</think>', '', text, flags=re.DOTALL)
    text = re.sub(r'<\w+[^>]*>', lambda m: m.group(0) if m.group(0) in ['<b>', '<i>', '<code>', '<pre>'] else '', text)
    text = re.sub(r'</\w+>', lambda m: m.group(0) if m.group(0) in ['</b>', '</i>', '</code>', '</pre>'] else '', text)
    
    # –ù–û–í–û–ï: –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ **—Ç–µ–∫—Å—Ç** –≤ <b>—Ç–µ–∫—Å—Ç</b> (–∂–∏—Ä–Ω—ã–π —à—Ä–∏—Ñ—Ç)
    text = re.sub(r'\*\*(.*?)\*\*', r'<b>\1</b>', text)
    
    # –ù–û–í–û–ï: –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ *—Ç–µ–∫—Å—Ç* –≤ <i>—Ç–µ–∫—Å—Ç</i> (–∫—É—Ä—Å–∏–≤)
    text = re.sub(r'\*(.*?)\*', r'<i>\1</i>', text)
    
    # –ó–∞–º–µ–Ω—è–µ–º ``` –Ω–∞ <pre><code> –¥–ª—è –∫–æ–¥–∞
    def code_block_replace(match):
        code_content = match.group(1).strip()
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML —Å–∏–º–≤–æ–ª—ã –≤ –∫–æ–¥–µ
        code_content = html.escape(code_content)
        return f'<pre><code>{code_content}</code></pre>'
    
    text = re.sub(r'```([^`]*)```', code_block_replace, text, flags=re.DOTALL)
    text = re.sub(r'`([^`]+)`', r'<code>\1</code>', text)  # –û–¥–∏–Ω–æ—á–Ω—ã–µ ` –¥–ª—è inline –∫–æ–¥–∞
    
    return text.strip()

def escape_html(text):
    """–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML —Å–∏–º–≤–æ–ª–æ–≤"""
    return html.escape(text)

def is_user_subscribed(user_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    current_time = time.time()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    if user_id in user_subscriptions:
        cached_time, is_subscribed = user_subscriptions[user_id]
        if current_time - cached_time < 300:  # –ö—ç—à –Ω–∞ 5 –º–∏–Ω—É—Ç
            return is_subscribed
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    try:
        chat_member = bot.get_chat_member(CHANNEL_USERNAME, user_id)
        is_subscribed = chat_member.status in ['member', 'administrator', 'creator']
        user_subscriptions[user_id] = (current_time, is_subscribed)
        return is_subscribed
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False

# –ù–û–í–û–ï: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –∑–∞–Ω—è—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
def is_user_busy(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ª–∏ –±–æ—Ç —É–∂–µ –∑–∞–ø—Ä–æ—Å –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    return user_busy_states.get(user_id, False)

# –ù–û–í–û–ï: –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def set_user_busy(user_id, busy=True):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∑–∞–Ω—è—Ç/—Å–≤–æ–±–æ–¥–µ–Ω)."""
    user_busy_states[user_id] = busy

def get_ai_response(prompt, user_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ò–ò —á–µ—Ä–µ–∑ OpenRouter"""
    try:
        headers = {
            "Authorization": f"Bearer {OPENROUTER_API_KEY}",
            "Content-Type": "application/json"
        }
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        history = get_user_history(user_id)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–¥–µ–ª—å –ø–æ —Ç–∏–ø—É –∑–∞–ø—Ä–æ—Å–∞
        is_code_request = any(keyword in prompt.lower() for keyword in [
            '–∫–æ–¥', 'script', 'unity', 'c#', 'csharp', 'python', 'javascript', 'js', 
            'java', 'cpp', 'c++', 'php', 'ruby', 'go', 'rust', 'swift', 'kotlin',
            '—Å–∫—Ä–∏–ø—Ç', '–ø—Ä–æ–≥—Ä–∞–º–º–∞', '—Ñ—É–Ω–∫—Ü–∏—è', '–º–µ—Ç–æ–¥', '–∫–ª–∞—Å—Å'
        ])
        
        if is_code_request:
            # –î–ª—è –∫–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å
            models_to_try = [
    "meta-llama/llama-3.3-70b-instruct:free", # –û—á–µ–Ω—å –ø–æ–ø—É–ª—è—Ä–Ω–∞—è –∏ –º–æ—â–Ω–∞—è –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –º–æ–¥–µ–ª—å.
    "nousresearch/hermes-3-llama-3.1-405b:free", # –í—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏.
    "neversleep/llama-3.1-lumimaid-70b:free", # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ Llama 3.1 70B.
    "microsoft/wizardlm-2-7b:free", # –•–æ—Ä–æ—à–∞—è –º–æ–¥–µ–ª—å –æ—Ç Microsoft, –º–µ–Ω—å—à–∏–π —Ä–∞–∑–º–µ—Ä.
    "google/gemma-2-27b-it:free", # –ú–æ—â–Ω–∞—è –º–æ–¥–µ–ª—å Gemma 2 –æ—Ç Google.
    "google/gemma-2-9b-it:free", # –ë–æ–ª–µ–µ –ª–µ–≥–∫–∞—è –≤–µ—Ä—Å–∏—è Gemma 2.
    "meta-llama/llama-3-70b-instruct:free", # –ü—Ä–µ–¥—ã–¥—É—â–∞—è –≤–µ—Ä—Å–∏—è Llama 3, 70B.
    "meta-llama/llama-3-8b-instruct:free", # –õ–µ–≥–∫–∞—è –≤–µ—Ä—Å–∏—è Llama 3, 8B.
    "mistralai/mistral-7b-instruct:free", # –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ–ª—å Mistral 7B.
    "openchat/openchat-7b:free", # –î—Ä—É–≥–∞—è –ø–æ–ø—É–ª—è—Ä–Ω–∞—è 7B –º–æ–¥–µ–ª—å.
            ]
            system_prompt = """–¢—ã Qwen Coder, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è.
–¢—ã –¥–æ–ª–∂–µ–Ω –ø–∏—Å–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ä–∞–±–æ—á–∏–π, –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥.
–ù–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.
–û–±—ä—è—Å–Ω—è–π –∫–æ–¥ –ø–æ —à–∞–≥–∞–º.
–ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å.
–û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."""
        else:
            # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â—É—é –º–æ–¥–µ–ª—å
            models_to_try = [
    "meta-llama/llama-3.3-70b-instruct:free", # –û—á–µ–Ω—å –ø–æ–ø—É–ª—è—Ä–Ω–∞—è –∏ –º–æ—â–Ω–∞—è –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –º–æ–¥–µ–ª—å.
    "nousresearch/hermes-3-llama-3.1-405b:free", # –í—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏.
    "neversleep/llama-3.1-lumimaid-70b:free", # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ Llama 3.1 70B.
    "microsoft/wizardlm-2-7b:free", # –•–æ—Ä–æ—à–∞—è –º–æ–¥–µ–ª—å –æ—Ç Microsoft, –º–µ–Ω—å—à–∏–π —Ä–∞–∑–º–µ—Ä.
    "google/gemma-2-27b-it:free", # –ú–æ—â–Ω–∞—è –º–æ–¥–µ–ª—å Gemma 2 –æ—Ç Google.
    "google/gemma-2-9b-it:free", # –ë–æ–ª–µ–µ –ª–µ–≥–∫–∞—è –≤–µ—Ä—Å–∏—è Gemma 2.
    "meta-llama/llama-3-70b-instruct:free", # –ü—Ä–µ–¥—ã–¥—É—â–∞—è –≤–µ—Ä—Å–∏—è Llama 3, 70B.
    "meta-llama/llama-3-8b-instruct:free", # –õ–µ–≥–∫–∞—è –≤–µ—Ä—Å–∏—è Llama 3, 8B.
    "mistralai/mistral-7b-instruct:free", # –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ–ª—å Mistral 7B.
    "openchat/openchat-7b:free", # –î—Ä—É–≥–∞—è –ø–æ–ø—É–ª—è—Ä–Ω–∞—è 7B –º–æ–¥–µ–ª—å.
            ]
            system_prompt = """–¢—ã Qwen, –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —è–∑—ã–∫–æ–≤–∞—è –º–æ–¥–µ–ª—å.
–ë—É–¥—å –ø–æ–ª–µ–∑–Ω—ã–º, —Ç–æ—á–Ω—ã–º –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º.
–û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
–ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å –æ—Ç–≤–µ—Ç–∞ ‚Äî —Å–∫–∞–∂–∏ —á–µ—Å—Ç–Ω–æ."""

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        messages = [{"role": "system", "content": system_prompt}]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
        for role, content in history:
            messages.append({"role": role, "content": content})
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        messages.append({"role": "user", "content": prompt})
        
        for model in models_to_try:
            data = {
                "model": model,
                "messages": messages,
                "temperature": 0.5,
                "max_tokens": 1000,
                "top_p": 0.9,
                "frequency_penalty": 0.1
            }
            
            logger.info(f"–ó–∞–ø—Ä–æ—Å –∫ –º–æ–¥–µ–ª–∏: {model}")
            start_time = time.time()
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±—Ä–∞–Ω –ª–∏—à–Ω–∏–π –ø—Ä–æ–±–µ–ª –≤ –∫–æ–Ω—Ü–µ URL
            response = requests.post(
                "https://openrouter.ai/api/v1/chat/completions",
                headers=headers,
                json=data,
                timeout=25
            )
            
            end_time = time.time()
            logger.info(f"–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {end_time - start_time:.2f} —Å–µ–∫")
            
            if response.status_code == 200:
                result = response.json()
                answer = result['choices'][0]['message']['content']
                clean_answer = clean_response(answer)
                logger.info(f"–£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏ {model}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
                save_to_history(user_id, "user", prompt)
                save_to_history(user_id, "assistant", clean_answer)
                cleanup_history(user_id)  # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—É—é –∏—Å—Ç–æ—Ä–∏—é
                
                return clean_answer
            else:
                logger.warning(f"–ú–æ–¥–µ–ª—å {model} –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞: {response.status_code}")
                # –ò–ó–ú–ï–ù–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ 429 –∏–ª–∏ –¥—Ä—É–≥–∏—Ö
                if response.status_code == 429 or response.status_code >= 500:
                     time.sleep(1) # –ü–∞—É–∑–∞ 1 —Å–µ–∫—É–Ω–¥–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
                continue
        
        logger.error("–í—Å–µ –º–æ–¥–µ–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        return None
            
    except requests.exceptions.Timeout:
        logger.error("–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ API")
        return "timeout"
    except requests.exceptions.ConnectionError:
        logger.error("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API")
        return "connection_error"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenRouter: {e}")
        return None

def check_user_limit(user_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    current_time = datetime.now()
    
    if user_id not in user_requests:
        user_requests[user_id] = []
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã (—Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞)
    user_requests[user_id] = [
        req_time for req_time in user_requests[user_id] 
        if (current_time - req_time).seconds < 3600
    ]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç (15 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —á–∞—Å)
    if len(user_requests[user_id]) >= 15:
        return False, "–í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ (15 –≤ —á–∞—Å). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å
    user_requests[user_id].append(current_time)
    return True, ""

def get_main_menu_markup():
    """–°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    markup = types.InlineKeyboardMarkup(row_width=1)
    channel_btn = types.InlineKeyboardButton(
        f"{EMOJIS['subscribe']} –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", 
        url=f"https://t.me/{CHANNEL_USERNAME[1:]}"
    )
    check_btn = types.InlineKeyboardButton(
        f"{EMOJIS['check']} –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", 
        callback_data="check_subscription"
    )
    help_btn = types.InlineKeyboardButton(
        f"{EMOJIS['question']} –ü–æ–º–æ—â—å", 
        callback_data="help"
    )
    markup.add(channel_btn, check_btn, help_btn)
    return markup

@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_id = message.from_user.id
    user_name = message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if is_user_subscribed(user_id):
        # –£–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø
        welcome_text = f"""
{EMOJIS['party']} <b>–ü—Ä–∏–≤–µ—Ç —Å–Ω–æ–≤–∞, {user_name}!</b>

{EMOJIS['robot']} –¢—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª –∏ –º–æ–∂–µ—à—å –∑–∞–¥–∞–≤–∞—Ç—å –º–Ω–µ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã!

<b>–ß—Ç–æ —è —É–º–µ—é:</b>
‚Ä¢ {EMOJIS['light']} –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
‚Ä¢ {EMOJIS['pen']} –ü–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç—ã  
‚Ä¢ {EMOJIS['book']} –ü–æ–º–æ–≥–∞—Ç—å —Å —É—á–µ–±–æ–π
‚Ä¢ {EMOJIS['bulb']} –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–¥–µ–∏
‚Ä¢ {EMOJIS['globe']} –ü–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Ç–µ–∫—Å—Ç—ã

<i>{EMOJIS['zap']} –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –≤ —á–∞—Ç!</i>
<i>{EMOJIS['warning']} –õ–∏–º–∏—Ç: 15 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —á–∞—Å</i>
        """
        
        markup = types.InlineKeyboardMarkup()
        help_btn = types.InlineKeyboardButton(
            f"{EMOJIS['question']} –ü–æ–º–æ—â—å", 
            callback_data="help"
        )
        markup.add(help_btn)
        
        # –ò–ó–ú–ï–ù–ï–ù–û: –£–±—Ä–∞–Ω escape_html, —Ç–∞–∫ –∫–∞–∫ parse_mode='HTML' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        bot.send_message(message.chat.id, welcome_text, reply_markup=markup)
        return
    
    # –ù–µ –ø–æ–¥–ø–∏—Å–∞–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    welcome_text = f"""
{EMOJIS['robot']} <b>–ü—Ä–∏–≤–µ—Ç, {user_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AI –ü–æ–º–æ—â–Ω–∏–∫!</b>

{EMOJIS['brain']} <b>–ß—Ç–æ —è —É–º–µ—é:</b>
‚Ä¢ {EMOJIS['light']} –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã
‚Ä¢ {EMOJIS['pen']} –ü–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç—ã –∏ —Å–æ—á–∏–Ω–µ–Ω–∏—è  
‚Ä¢ {EMOJIS['book']} –ü–æ–º–æ–≥–∞—Ç—å —Å —É—á–µ–±–æ–π
‚Ä¢ {EMOJIS['bulb']} –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–¥–µ–∏
‚Ä¢ {EMOJIS['globe']} –ü–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Ç–µ–∫—Å—Ç—ã

{EMOJIS['warning']} <b>–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ:</b>
1. {EMOJIS['subscribe']} –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª {CHANNEL_USERNAME}
2. {EMOJIS['check']} –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É

<i>{EMOJIS['zap']} –≠—Ç–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ! –õ–∏–º–∏—Ç: 15 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —á–∞—Å</i>
    """
    
    # –ò–ó–ú–ï–ù–ï–ù–û: –£–±—Ä–∞–Ω escape_html
    bot.send_message(message.chat.id, welcome_text, reply_markup=get_main_menu_markup())

@bot.message_handler(commands=['help'])
def send_help(message):
    help_text = f"""
{EMOJIS['robot']} <b>–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É</b>

{EMOJIS['question']} <b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:</b>
‚Ä¢ –ù–∞–ø–∏—à–∏ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –≤ —á–∞—Ç
‚Ä¢ –ü–æ–ª—É—á–∏ —É–º–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò

{EMOJIS['star']} <b>–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:</b>
‚Ä¢ "–ù–∞–ø–∏—à–∏ —Å–æ—á–∏–Ω–µ–Ω–∏–µ –Ω–∞ —Ç–µ–º—É –¥—Ä—É–∂–±—ã"
‚Ä¢ "–û–±—ä—è—Å–Ω–∏ —Ç–µ–æ—Ä–∏—é –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"
‚Ä¢ "–ü–µ—Ä–µ–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç —Å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ"
‚Ä¢ "–ü—Ä–∏–¥—É–º–∞–π 5 –∏–¥–µ–π –¥–ª—è –ø–æ–¥–∞—Ä–∫–∞"
‚Ä¢ "–ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç –¥–ª—è Unity"

{EMOJIS['light']} <b>–°–æ–≤–µ—Ç—ã:</b>
‚Ä¢ –ß–µ–º —Ç–æ—á–Ω–µ–µ –≤–æ–ø—Ä–æ—Å, —Ç–µ–º –ª—É—á—à–µ –æ—Ç–≤–µ—Ç
‚Ä¢ –î–ª—è –∫–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π —á–µ—Ç–∫–∏–µ —É–∫–∞–∑–∞–Ω–∏—è —è–∑—ã–∫–∞

{EMOJIS['warning']} <b>–õ–∏–º–∏—Ç—ã:</b>
‚Ä¢ 15 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —á–∞—Å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    
    markup = types.InlineKeyboardMarkup()
    back_btn = types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
    markup.add(back_btn)
    
    # –ò–ó–ú–ï–ù–ï–ù–û: –£–±—Ä–∞–Ω escape_html
    bot.send_message(message.chat.id, help_text, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "check_subscription")
def check_subscription(call):
    try:
        user_id = call.from_user.id
        user_name = call.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        
        if is_user_subscribed(user_id):
            success_text = f"""
{EMOJIS['party']} <b>–û—Ç–ª–∏—á–Ω–æ, {user_name}! –î–æ—Å—Ç—É–ø –æ—Ç–∫—Ä—ã—Ç!</b>

{EMOJIS['robot']} –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –∑–∞–¥–∞–≤–∞—Ç—å –º–Ω–µ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã!

<i>{EMOJIS['zap']} –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –≤ —á–∞—Ç!</i>
            """
            
            bot.answer_callback_query(call.id, "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!")
            # –ò–ó–ú–ï–ù–ï–ù–û: –£–±—Ä–∞–Ω escape_html
            bot.edit_message_text(success_text, call.message.chat.id, call.message.message_id)
            
            instruction_text = f"""
{EMOJIS['light']} <b>–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!</b>
–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è –æ—Ç–≤–µ—á—É —Å –ø–æ–º–æ—â—å—é –ò–ò!

{EMOJIS['clock']} <i>–û—Ç–≤–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç –±—ã—Å—Ç—Ä–æ (5-15 —Å–µ–∫—É–Ω–¥)</i>
            """
            # –ò–ó–ú–ï–ù–ï–ù–û: –£–±—Ä–∞–Ω escape_html
            bot.send_message(call.message.chat.id, instruction_text)
        else:
            bot.answer_callback_query(call.id, "‚ùå –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª")
            
            error_text = f"""
{EMOJIS['warning']} <b>–ù—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª</b>

–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –±—ã—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–º –Ω–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞ {CHANNEL_USERNAME}!

{EMOJIS['check']} –ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É" –µ—â–µ —Ä–∞–∑.
            """
            
            # –ò–ó–ú–ï–ù–ï–ù–û: –£–±—Ä–∞–Ω escape_html
            bot.edit_message_text(error_text, call.message.chat.id, call.message.message_id, reply_markup=get_main_menu_markup())
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ")

@bot.callback_query_handler(func=lambda call: call.data == "back_to_main")
def back_to_main(call):
    user_id = call.from_user.id
    user_name = call.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    if is_user_subscribed(user_id):
        # –£–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω
        welcome_text = f"""
{EMOJIS['party']} <b>–ü—Ä–∏–≤–µ—Ç —Å–Ω–æ–≤–∞, {user_name}!</b>

{EMOJIS['robot']} –¢—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω –∏ –º–æ–∂–µ—à—å –∑–∞–¥–∞–≤–∞—Ç—å –º–Ω–µ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã!

<b>–ß—Ç–æ —è —É–º–µ—é:</b>
‚Ä¢ {EMOJIS['light']} –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
‚Ä¢ {EMOJIS['pen']} –ü–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç—ã  
‚Ä¢ {EMOJIS['book']} –ü–æ–º–æ–≥–∞—Ç—å —Å —É—á–µ–±–æ–π
‚Ä¢ {EMOJIS['bulb']} –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–¥–µ–∏

<i>{EMOJIS['zap']} –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å!</i>
        """
        
        markup = types.InlineKeyboardMarkup()
        help_btn = types.InlineKeyboardButton(
            f"{EMOJIS['question']} –ü–æ–º–æ—â—å", 
            callback_data="help"
        )
        markup.add(help_btn)
        
        # –ò–ó–ú–ï–ù–ï–ù–û: –£–±—Ä–∞–Ω escape_html
        bot.edit_message_text(welcome_text, call.message.chat.id, call.message.message_id, reply_markup=markup)
    else:
        # –ù–µ –ø–æ–¥–ø–∏—Å–∞–Ω
        welcome_text = f"""
{EMOJIS['robot']} <b>–ü—Ä–∏–≤–µ—Ç, {user_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AI –ü–æ–º–æ—â–Ω–∏–∫!</b>

{EMOJIS['brain']} <b>–ß—Ç–æ —è —É–º–µ—é:</b>
‚Ä¢ {EMOJIS['light']} –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã
‚Ä¢ {EMOJIS['pen']} –ü–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç—ã –∏ —Å–æ—á–∏–Ω–µ–Ω–∏—è  
‚Ä¢ {EMOJIS['book']} –ü–æ–º–æ–≥–∞—Ç—å —Å —É—á–µ–±–æ–π
‚Ä¢ {EMOJIS['bulb']} –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–¥–µ–∏
‚Ä¢ {EMOJIS['globe']} –ü–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Ç–µ–∫—Å—Ç—ã
        """
        
        # –ò–ó–ú–ï–ù–ï–ù–û: –£–±—Ä–∞–Ω escape_html
        bot.edit_message_text(welcome_text, call.message.chat.id, call.message.message_id, reply_markup=get_main_menu_markup())
    
    bot.answer_callback_query(call.id, "")

@bot.callback_query_handler(func=lambda call: call.data == "help")
def show_help(call):
    help_text = f"""
{EMOJIS['robot']} <b>–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É</b>

{EMOJIS['question']} <b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:</b>
‚Ä¢ –ù–∞–ø–∏—à–∏ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –≤ —á–∞—Ç
‚Ä¢ –ü–æ–ª—É—á–∏ —É–º–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò

{EMOJIS['star']} <b>–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:</b>
‚Ä¢ "–ù–∞–ø–∏—à–∏ —Å–æ—á–∏–Ω–µ–Ω–∏–µ –Ω–∞ —Ç–µ–º—É –¥—Ä—É–∂–±—ã"
‚Ä¢ "–û–±—ä—è—Å–Ω–∏ —Ç–µ–æ—Ä–∏—é –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"
‚Ä¢ "–ü–µ—Ä–µ–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç —Å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ"
‚Ä¢ "–ü—Ä–∏–¥—É–º–∞–π 5 –∏–¥–µ–π –¥–ª—è –ø–æ–¥–∞—Ä–∫–∞"
‚Ä¢ "–ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç –¥–ª—è Unity –Ω–∞ C#"

{EMOJIS['light']} <b>–°–æ–≤–µ—Ç—ã:</b>
‚Ä¢ –ß–µ–º —Ç–æ—á–Ω–µ–µ –≤–æ–ø—Ä–æ—Å, —Ç–µ–º –ª—É—á—à–µ –æ—Ç–≤–µ—Ç
‚Ä¢ –î–ª—è –∫–æ–¥–∞ —É–∫–∞–∑—ã–≤–∞–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è

{EMOJIS['warning']} <b>–õ–∏–º–∏—Ç—ã:</b>
‚Ä¢ 15 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —á–∞—Å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    
    markup = types.InlineKeyboardMarkup()
    back_btn = types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
    markup.add(back_btn)
    
    # –ò–ó–ú–ï–ù–ï–ù–û: –£–±—Ä–∞–Ω escape_html
    bot.edit_message_text(help_text, call.message.chat.id, call.message.message_id, reply_markup=markup)
    bot.answer_callback_query(call.id, "")

@bot.message_handler(func=lambda message: True)
def handle_question(message):
    user_id = message.from_user.id
    user_name = message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    question = message.text
    
    logger.info(f"–í–æ–ø—Ä–æ—Å –æ—Ç {user_name} ({user_id}): {question}")
    
    # –ò–ó–ú–ï–ù–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–Ω—è—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if is_user_busy(user_id):
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –∑–∞–Ω—è—Ç. –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å.")
        # –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –µ–≥–æ –∑–∞–ø—Ä–æ—Å –≤ –æ—á–µ—Ä–µ–¥–∏
        # bot.send_message(message.chat.id, f"{EMOJIS['clock']} –í–∞—à –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")
        return # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å

    # –°—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    if not is_user_subscribed(user_id):
        # –ù–µ –ø–æ–¥–ø–∏—Å–∞–Ω - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É
        welcome_text = f"""
{EMOJIS['warning']} <b>–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω</b>

–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –±—ã—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–º –∫–∞–Ω–∞–ª–∞ {CHANNEL_USERNAME}

{EMOJIS['check']} –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Å—å –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏ –ø–æ–¥–ø–∏—Å–∫—É:
        """
        
        # –ò–ó–ú–ï–ù–ï–ù–û: –£–±—Ä–∞–Ω escape_html
        bot.send_message(message.chat.id, welcome_text, reply_markup=get_main_menu_markup())
        return
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤
        can_proceed, limit_message = check_user_limit(user_id)
        if not can_proceed:
            bot.send_message(message.chat.id, f"{EMOJIS['warning']} {limit_message}")
            return

        # –ò–ó–ú–ï–ù–ï–ù–û: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ "–∑–∞–Ω—è—Ç"
        set_user_busy(user_id, True)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
        processing_msg = bot.send_message(
            message.chat.id, 
            f"{EMOJIS['clock']} –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å...\n{EMOJIS['brain']} –ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ –ò–ò..."
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò
        answer = get_ai_response(question, user_id)
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
        try:
            bot.delete_message(message.chat.id, processing_msg.message_id)
        except:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è

        # –ò–ó–ú–ï–ù–ï–ù–û: –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ò–ò
        set_user_busy(user_id, False)
        
        if answer and answer not in ["timeout", "connection_error"]:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —á–∏—Å—Ç—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò
            # –ò–ó–ú–ï–ù–ï–ù–û: parse_mode='HTML' —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –Ω–æ –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏
            try:
                bot.send_message(message.chat.id, answer, parse_mode='HTML')
            except Exception as e:
                # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                clean_text = re.sub(r'<[^>]+>', '', answer)  # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ç–µ–≥–∏
                bot.send_message(message.chat.id, clean_text)
        elif answer == "timeout":
            error_text = f"""
{EMOJIS['warning']} <b>–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ</b>

–ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω—è–ª—Å—è —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ. –ü–æ–ø—Ä–æ–±—É–π:
‚Ä¢ –°–¥–µ–ª–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø—Ä–æ—â–µ
‚Ä¢ –ó–∞–ø—Ä–æ—Å–∏—Ç—å –º–µ–Ω—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
‚Ä¢ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ

{EMOJIS['clock']} –ü–æ–≤—Ç–æ—Ä–∏ –ø–æ–ø—ã—Ç–∫—É —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.
            """
            # –ò–ó–ú–ï–ù–ï–ù–û: –£–±—Ä–∞–Ω escape_html
            bot.send_message(message.chat.id, error_text)
        elif answer == "connection_error":
            error_text = f"""
{EMOJIS['warning']} <b>–ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º</b>

–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É –ò–ò. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.

{EMOJIS['clock']} –ü–æ–≤—Ç–æ—Ä–∏ –ø–æ–ø—ã—Ç–∫—É —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.
            """
            # –ò–ó–ú–ï–ù–ï–ù–û: –£–±—Ä–∞–Ω escape_html
            bot.send_message(message.chat.id, error_text)
        else:
            error_text = f"""
{EMOJIS['warning']} <b>–ò–∑–≤–∏–Ω–∏, –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞</b>

–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò. –ü–æ–ø—Ä–æ–±—É–π:
‚Ä¢ –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å
‚Ä¢ –°–¥–µ–ª–∞—Ç—å –µ–≥–æ –ø—Ä–æ—â–µ
‚Ä¢ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ

{EMOJIS['clock']} –ü–æ–≤—Ç–æ—Ä–∏ –ø–æ–ø—ã—Ç–∫—É —á–µ—Ä–µ–∑ –ø–∞—Ä—É –º–∏–Ω—É—Ç.
            """
            # –ò–ó–ú–ï–ù–ï–ù–û: –£–±—Ä–∞–Ω escape_html
            bot.send_message(message.chat.id, error_text)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        # –ò–ó–ú–ï–ù–ï–ù–û: –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        set_user_busy(user_id, False)
        try:
            bot.delete_message(message.chat.id, processing_msg.message_id)
        except:
            pass
        error_text = f"""
{EMOJIS['warning']} <b>–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –±–æ—Ç–∞</b>

–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ–∑–∂–µ.

{EMOJIS['clock']} –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω –æ –ø—Ä–æ–±–ª–µ–º–µ.
        """
        # –ò–ó–ú–ï–ù–ï–ù–û: –£–±—Ä–∞–Ω escape_html
        bot.send_message(message.chat.id, error_text)

# === –ó–ê–ü–£–°–ö –ë–û–¢–ê ===

if __name__ == '__main__':
    init_db()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    try:
        bot_info = bot.get_me()
        logger.info(f"‚úÖ –ë–æ—Ç @{bot_info.username} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
        print(f"ü§ñ –ë–æ—Ç @{bot_info.username} –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        print("–ù–∞–∂–º–∏ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        bot.polling(none_stop=True)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
